時間複雜度 Time Complexity
        
定義: 演算法要執行幾個指令

表示方法: Big O, 有n個輸入，由於不會精確地計算每個演算法的複雜度，會取最高次方項並忽略係數，e.g. O(n^2)
    如: 一個函式有2n^2 + 4n + 3個指令，我們會註記他的時間複雜度為O(n^2)

常見時間複雜度:

  1. O(1): n不會影響程式的執行時間，e.g. 陣列讀取
      print(n)
  
  2. O(n): n的大小而影響for迴圈要做幾次
      for i in range(n):
  
  3. O(n^2): n會被nested for迴圈做n^2次
      for i in range(n):
        for j in range(n):

  4. O(logn): 每執行一個步驟就減去一半，備註:此log以2為底，所以當n < 2時，O(logn)會差於O(n)，但絕大部分還是O(logn)優於O(n)
      e.g. 二分法搜尋: 
      假設在n個排序好的數字裡面找到target，每次都選中位數，就可以每次都從數列中刪除一半，如n有15個數，log15 <= 4，代表最多4次就能找到指定數     

  5. 其他還有 O(nlogn)、O(2^n)等
  
  6.當n越大時，增長幅度基本上為:
    O(logn) < O(n) < O(nlogn) < O(n^2) < O(2^n)

===========================================================================================================================

空間複雜度 Space Complexity

定義: 執行演算法所需要耗費的記憶體成本

表示方法: 也是Big O

常見空間複雜度:

  1.  O(1): n輸入的大小不影響需要使用的記憶體
      for i in range(n):
        print(n)

  2.  O(n): n的大小而影響它會使用的記憶體容量
      arr = np.zeros(n)

資料來源: 
        https://jason-chen-1992.weebly.com/home/time-space-complexity
        https://medium.com/appworks-school/初學者學演算法-從時間複雜度認識常見演算法-一-b46fece65ba5 
